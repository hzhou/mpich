#!/usr/bin/perl
# -*- Mode: perl; -*-
#
# This script is the beginnings of a script to run a sequence of test 
# programs.  See the MPICH document for a description of the test
# strategy and requirements.
#
# Description
#   Tests are controlled by a file listing test programs; if the file is
#   a directory, then all of the programs in the directory and subdirectories
#   are run
#
#   To run a test, the following steps are executed
#   Build the executable:
#      make programname
#   Run the executable
#      mpiexec -n <np> ./programname >out 2>err
#   Check the return code (non zero is failure)
#   Check the stderr output (non empty is failure)
#   Check the stdout output (No Errors or Test passed are the only valid
#      output)
#   Remove executable, out, err files
#
# The format of a list file is
# programname number-of-processes
# If number-of-processes is missing, $np_default is used (this is 2 but can
# be overridden with -np=new-value)
#
# Special feature:
# Because these tests can take a long time to run, there is an
# option to cause the tests to stop is a "stopfile" is found.
# The stopfile can be created by a separate, watchdog process, to ensure that
# tests end at a certain time.
# The name of this file is (by default) .stoptest
# in the  top-level run directory.  The environment variable
#    MPITEST_STOPTEST
# can specify a different file name.
#
# Import the mkpath command
use strict;
use File::Path;
use File::Copy qw(move);

# Use high resolution timers
use Time::HiRes qw(gettimeofday tv_interval);

# Global variables
my @individual_tests;

our %config;
set_config_default();
load_config();
load_environment();
load_commandline();
post_config();
my $verbose = $config{verbose};

my $err_count = 0;          # Number of programs that failed.
my $skip_count = 0;         # Number of programs skipped
my $total_run = 0;          # Number of programs tested
my $total_seen = 0;         # Number of programs considered for testing

my $srcdir = $config{srcdir}; # Used to set the source dir for testlist files
my $curdir = ".";           # used to track the relative current directory

# Output forms
my $xmloutput = 0;          # Set to true to get xml output (also specify file)
my $newline = "\r\n";       # Set to \r\n for Windows-friendly, \n for Unix only

# TAP (Test Anything Protocol) output
my $tapoutput = 0;
my $tapfile = '';
my $tapfullfile = '';

# Junit format output
my $junitoutput = 0;
my $junitfile = '';
my $junitfullfile = '';

# Build flags
my $remove_this_pgm = 0;
my $clean_pgms      = 1;

#---------------------------------------------------------------------------
# Process arguments and override any defaults
#---------------------------------------------------------------------------
our $batch_test_count = 0;
if ($config{run_batch}) {
    if (! -d $config{batch_dir}) {
	mkpath $config{batch_dir} || die "Could not create $config{batch_dir}\n";
    }
    my $f = "$config{batch_dir}/runtests.batch";
    open( BATOUT, ">$f" ) || die "Could not open $f\n";
}
else {
    # We must have mpiexec
    if (!$config{mpiexec}) {
	print STDERR "No mpiexec found!\n";
	exit(1);
    }
}

# ---- running tests ----------
if (@individual_tests) {
    RunList($config{tests}, \@individual_tests);
}
else {
    # ./runtests -tests="testlist testlist.dtp"
    RunList( $config{tests} );
}

# ---- post running -----------
close_OUT();
# Output a summary:
if ($config{run_batch}) {
    print "Programs created along with a runtest.batch file in $config{batch_dir}\n";
    print "Run that script and then use checktests to summarize the results\n";
}
else {
    if ($err_count) {
	print "$err_count tests failed out of $total_run\n";
    }
    else {
	print " All $total_run tests passed!\n";
    }
    print_output_results();
}
#
# ---------------------------------------------------------------------------
# Routines
# 
# Enter a new directory and process a list file.  
#  ProcessDir( directory-name, list-file-name )
sub ProcessDir {
    my ($dir, $listfiles) = @_;
    $dir =~ s/\/$//;
    my $savedir = `pwd`;
    my $savecurdir = $curdir;
    my $savesrcdir = $srcdir;

    chop $savedir;
    if (substr($srcdir,0,3) eq "../") {
      $srcdir = "../$srcdir";
    }

    print "Processing directory $dir\n" if $verbose;
    chdir $dir;
    if ($dir =~ /\//) {
	print STDERR "only direct subdirectories allowed in list files";
    }
    $curdir .= "/$dir";

    &RunList( $listfiles );
    print "\n" if $config{show_progress}; # Terminate line from progress output
    chdir $savedir;
    $curdir = $savecurdir;
    $srcdir = $savesrcdir;
}
# ---------------------------------------------------------------------------
# Run the programs listed in the file given as the argument. 
# This file describes the tests in the format
#  programname number-of-processes [ key=value ... ]
# If the second value is not given, the default value is used.
# 

sub load_testlist {
    my ($file) = shift;
    my @include_list=split /\s+/, $file;
    my %history; # to prevent deadloop loading
    my @test_lines;
    while (my $f = shift @include_list) {
        if (!$f or $history{$f}) {
            next;
        }
        $history{$f} = 1;

        print "Looking in $curdir/$f\n" if $verbose;
        my $listfileSource = $f;
        if (! -s "$f" && -s "$srcdir/$curdir/$f" ) {
            $listfileSource = "$srcdir/$curdir/$f";
        }
        if (open( In, "<$listfileSource" )){
            if ($verbose) {
                print "Loading tests from $listfileSource...\n";
            }
            while (<In>) {
                s/#.*//g;
                s/\r?\n//;
                s/^\s*//;

                if (/^\s*$/) {
                    next;
                }

                if (/^include\s+(\S+)/) {
                    # include testlist.xxx
                    push @include_list, $1;
                }
                elsif (/^(\S+)/ and -d $1){
                    # directory
                    push @test_lines, $_;
                }
                elsif ($config{run_xfail_only} or $config{include} or $config{exclude}) {
                    if ($config{run_xfail_only}) {
                        if (!/xfail=/) {
                            next;
                        }
                        s/xfail=\S*//;
                    }
                    if ($config{include}) {
                        if (!/$config{include}/) {
                            next;
                        }
                    }
                    if ($config{exclude}) {
                        if (/$config{exclude}/) {
                            next;
                        }
                    }
                    push @test_lines, $_;
                }
                else {
                    push @test_lines, $_;
                }
            }
            close In;
        }
    }
    return \@test_lines;
}

sub RunList { 
    my ($listfiles, $test_lines) = @_;
    my $ResultTest = "";
    my $InitForRun = "";

    if (!$test_lines) {
        $test_lines = load_testlist($listfiles);
    }

    foreach (@$test_lines) {
	# Check for stop file
	if (-s $config{stopfile}) {
	    # Exit because we found a stopfile
	    print STDERR "Terminating test because stopfile $config{stopfile} found\n";
	    last;
	}
	# Some tests require that support routines are built first
	# This is specified with !<dir>:<target>
	if (/^!([^:]*):(.*)/) {
	    # Hack: just execute in a subshell.  This discards any 
	    # output.
	    `cd $1 && make $2`;
	    next;
	}
	# List file entries have the form:
	# program [ np [ name=value ... ] ]
        if ($verbose) {
            print "TEST: $_\n";
        }
	# See files errhan/testlist, init/testlist, and spawn/testlist
	# for examples of using the key=value form
	my @args = split(/\s+/,$_);
	my $programname = shift @args;
	my $np = shift @args;

	if (!$np) { $np = $config{np_default}; }
	if ($config{np_max}>0 && $np > $config{np_max}) { 
            $np = $config{np_max}; 
        }

	# Process the key=value arguments
        my %opts;
        foreach my $a (@args) {
	    if ($a =~ /([^=]+)=(.*)/) {
		my ($key,$value) = ($1, $2);
                if ($key=~/^(resultTest|init|timeLimit|arg|env|mpiexecarg|xfail|mpiversion|strict|mpix)$/) {
                    if (exists $opts{$key}) {
                        $opts{$key}.=" $value";
                    }
                    else {
                        $opts{$key}=$value;
                    }
                }
                else {
		    print STDERR "Unrecognized key $key\n";
                }
	    }
	}
        if (exists $opts{xfail} && $opts{xfail} eq ""){
            print STDERR "\"xfail=\" requires an argument\n";
        }

        # allows us to accurately output TAP test numbers without disturbing the
        # original totals that have traditionally been reported
        #
        # These "unless" blocks are ugly, but permit us to honor skipping
        # criteria for directories as well without counting directories as tests
        # in our XML/TAP output.
        unless (-d $programname) {
            $total_seen++;
        }

        if (filter_mpiversion($opts{mpiversion})) {
            # If a minimum MPI version is specified, check against the
            # available MPI.  If the version is unknown, we ignore this
            # test (thus, all tests will be run).  
            SkippedTest($programname, $np, $opts{arg}, $opts{env}, $curdir, "requires MPI version $opts{mpiversion}");
            next;
	}
        # filter `strict=false` in strict mode
        if (filter_strict($opts{strict})) {
            SkippedTest($programname, $np, $opts{arg}, $opts{env}, $curdir, "non-strict test, strict MPI mode requested");
            next;
        }

        # Skip xfail tests if they are not configured. Strict MPI tests that are
        # marked xfail will still run with --enable-strictmpi.
        if (filter_xfail($opts{xfail})) {
            SkippedTest($programname, $np, $opts{arg}, $opts{env}, $curdir, "xfail tests disabled");
            next;
        }
        
        if (filter_mpix($opts{mpix})) {
            SkippedTest($programname, $np, $opts{arg}, $opts{env}, $curdir, "tests MPIX extensions, MPIX testing disabled");
            next;
        }

	if (-d $programname) {
	    # If a directory, go into the that directory and 
	    # look for a new list file
	    &ProcessDir( $programname, $listfiles );
	}
	else {
	    $total_run++;
            my ($rc, $output) = BuildMPIProgram( $programname, $opts{xfail});
            if ($rc == 0) {
                my @params = ( $programname, $np, $opts{resultTest}, 
                               $opts{init}, $opts{timeLimit}, $opts{arg},
                               $opts{env}, $opts{mpiexecarg}, $opts{xfail} );
		if ($config{run_batch}) {
		    &AddMPIProgram( @params );
		}
		else {
		    &RunMPIProgram( @params );
		}
	    }
	    elsif (!$opts{xfail}) {
		# We expected to run this program, so failure to build
		# is an error
		$err_count++;

                # Add a line to the summary file describing the failure
                # This will ensure that failures to build will end up 
                # in the summary file (which is otherwise written by the
                # RunMPIProgram step)
                &RunPreMsg( $programname, $np, $curdir );
                &RunTestFailed( $programname, $np, "", "", $opts{timeLimit}, $curdir, "Failed to build $programname; $output", $opts{xfail} );
                &RunPostMsg( $programname, $np, $curdir );
	    }
	    if (!$config{run_batch}) {
		&CleanUpAfterRun( $programname );
	    }
	}
    }
}

#
# Run the program.  
# ToDo: Add a way to limit the time that any particular program may run.
# The arguments are
#    name of program, number of processes, name of routine to check results
#    init for testing, timelimit, and any additional program arguments
# If the 3rd arg is not present, the a default that simply checks that the
# return status is 0 and that the output is " No Errors" is used.
sub RunMPIProgram {
    my ($programname,$np,$ResultTest,$InitForTest,$timeLimit,$progArgs,$progEnv,$mpiexecArgs,$xfail) = @_;
    &RunPreMsg( $programname, $np, $curdir );

    unlink "err";

    # Set a default timeout on tests (3 minutes for now)
    my $timeout = $config{timeout_default};
    if (defined($timeLimit) && $timeLimit =~ /^\d+$/) {
	$timeout = $timeLimit;
    }
    $timeout *= $config{timeout_multiplier};
    $ENV{"MPIEXEC_TIMEOUT"} = $timeout;

    my @extra_args;
    arg_ppn(\@extra_args, $np);
    arg_timelimit(\@extra_args, $timeout);

    # Run the optional setup routine. For example, the timeout tests could
    # be set to a shorter timeout.
    if ($InitForTest ne "") {
	&$InitForTest();
    }
    my $cmd = "$config{mpiexec} $config{np_arg} $np @extra_args $mpiexecArgs $config{program_wrapper} ./$programname $progArgs";
    if ($verbose) {
        print "Env includes $progEnv\n";
        print "    $cmd\n";
    }
    print STDOUT "." if $config{show_progress};
    # Save and restore the environment if necessary before running mpiexec.
    my %saveEnv;
    if ($progEnv ne "") {
	%saveEnv = %ENV;
	foreach my $val (split(/\s+/, $progEnv)) {
	    if ($val =~ /([^=]+)=(.*)/) {
		$ENV{$1} = $2;
	    }
	    else {
		print STDERR "Environment variable/value $val not in a=b form\n";
	    }
	}
    }
    my $start_time = gettimeofday();
    open ( my $MPIOUT, "$cmd 2>&1 |" ) || die "Could not run ./$programname\n";
    if ($progEnv ne "") {
	%ENV = %saveEnv;
    }

    my $found_error   = 0;
    my $found_noerror = 0;
    my $inline = "";
    my $runtime = 0;

    if ($ResultTest ne "") {
	# Read and process the output
        my %testsubs = (
            TestStatus => \&TestStatus,
            TestStatusNoErrors => \&TestStatusNoErrors,
            TestErrFatal => \&TestErrFatal,
        );
        if ($testsubs{$ResultTest} ) {
            ($found_error, $inline) = $testsubs{$ResultTest}->( $MPIOUT, $programname );
        }
        else {
            $found_error = 1;
            $inline = "Unknown resultTest: $ResultTest"
        }
    }
    else {
	if ($verbose) {
	    $inline = "$cmd\n";
	}
	else {
	    $inline = "";
	}
	while (<$MPIOUT>) {
	    print STDOUT $_ if $verbose;
	    # Skip FORTRAN STOP
	    if (/FORTRAN STOP/) { next; }
	    $inline .= $_;
	    if (/^\s*No [Ee]rrors\s*$/ && $found_noerror == 0) {
		$found_noerror = 1;
	    }
	    if (! /^\s*No [Ee]rrors\s*$/ && !/^\s*Test Passed\s*$/ && !/requesting checkpoint\s*$/ && !/checkpoint completed\s*$/) {
		print STDERR "Unexpected output in $programname: $_";
		if (!$found_error) {
		    $found_error = 1;
		    $err_count ++;
		}
	    }
	}
	if ($found_noerror == 0) {
	    print STDERR "Program $programname exited without No Errors\n";
	    if (!$found_error) {
		$found_error = 1;
		$err_count ++;
	    }
	}
	my $end_time = gettimeofday();
	$runtime = $end_time - $start_time;
	print STDOUT "Runtime: $runtime\n" if $verbose;
	my $rc = close ( $MPIOUT );
	if ($rc == 0) {
	    # Only generate a message if we think that the program
	    # passed the test.
	    if (!$found_error) {
		my $run_status = $?;
		my $signal_num = $run_status & 127;
		if ($run_status > 255) { $run_status >>= 8; }
		print STDERR "Program $programname exited with non-zero status $run_status\n";
		if ($signal_num != 0) {
		    print STDERR "Program $programname exited with signal $signal_num\n";
		}
		$found_error = 1;
		$err_count ++;
	    }
	}
    }
    if ($found_error) {
        &RunTestFailed( $programname, $np, $progArgs, $progEnv, $timeout, $curdir, $inline, $xfail, $runtime );
    }
    else { 
        &RunTestPassed( $programname, $np, $progArgs, $progEnv, $curdir, $xfail, $runtime );
    }
    &RunPostMsg( $programname, $np, $curdir );
}

# This version simply writes the mpiexec command out, with the output going
# into a file, and recording the output status of the run.
sub AddMPIProgram {
    my ($programname,$np,$ResultTest,$InitForTest,$timeLimit,$progArgs,$progEnv,$mpiexecArgs, $xfail) = @_;

    if (! -x $programname) {
	print STDERR "Could not find $programname!";
	return;
    }

    if ($ResultTest ne "") {
	# This test really needs to be run manually, with this test
	# Eventually, we can update this to include handleing in checktests.
	print STDERR "Run $curdir/$programname with $np processes and use $ResultTest to check the results\n";
	return;
    }

    # Set a default timeout on tests (3 minutes for now)
    my $timeout = $config{timeout_default};
    if (defined($timeLimit) && $timeLimit =~ /^\d+$/) {
	# On some systems, there is no effective time limit on 
	# individual mpi program runs.  In that case, we may
	# want to treat these also as "run manually".
	$timeout = $timeLimit;
    }
    $timeout *= $config{timeout_multiplier};
    print BATOUT "export MPIEXEC_TIMEOUT=$timeout\n";
    
    # Run the optional setup routine. For example, the timeout tests could
    # be set to a shorter timeout.
    if ($InitForTest ne "") {
	&$InitForTest();
    }

    my @extra_args;
    arg_ppn(\@extra_args, $np);
    arg_timelimit(\@extra_args, $timeout);

    my $cmd = "$config{mpiexec} $config{np_arg} $np @extra_args $mpiexecArgs $config{program_wrapper} ./$programname $progArgs";
    if ($verbose) {
        print "Env includes $progEnv\n";
        print "    $cmd\n";
    }

    print STDOUT "." if $config{show_progress};
    # Save and restore the environment if necessary before running mpiexec.
    if ($progEnv ne "") {
	# Need to fix: 
	# save_NAME_is_set=is old name set
	# save_NAME=oldValue
	# export NAME=newvalue
	# (run) 
	# export NAME=oldValue (if set!)
	print STDERR "Batch output does not permit changes to environment\n";
    }
    # The approach here is to move the test codes to a single directory from
    # which they can be run; this avoids complex code to change directories
    # and ensure that the output goes "into the right place".
    $batch_test_count++;
    rename $programname, "$config{batch_dir}/$programname";
    print BATOUT "echo \"# $cmd\" > runtests.$batch_test_count.out\n";
    # Some programs expect to run in the same directory as the executable
    print BATOUT "$cmd >> runtests.$batch_test_count.out 2>&1\n";
    print BATOUT "echo \$? > runtests.$batch_test_count.status\n";
}

# 
# Return value is 0 on success, non zero on failure
sub BuildMPIProgram {
    my ($programname, $xfail) = @_;
    my $rc = 0;
    if (! -x $programname) { $remove_this_pgm = 1; }
    else { $remove_this_pgm = 0; }
    my $cmd = "make $programname";
    if ($verbose){
        print STDERR "making $programname\n";
        print "    $cmd ...\n";
    }
    my $output = `$cmd 2>&1`;
    $rc = $?;
    if ($rc > 255) { $rc >>= 8; }
    if (! -x $programname) {
	print STDERR "Failed to build $programname; $output\n";
        $rc = 1;
    }
    return ($rc, $output);
}

sub CleanUpAfterRun {
    my $programname = $_[0];
    
    # Check for that this program has exited.  If it is still running,
    # issue a warning and leave the application.  Of course, this
    # check is complicated by the lack of a standard access to the 
    # running processes for this user in Unix.
    my @stillRunning = &FindRunning( $programname );

    if ($#stillRunning > -1) {
	print STDERR "Some programs ($programname) may still be running:\npids = ";
	for (my $i=0; $i <= $#stillRunning; $i++ ) {
	    print STDERR $stillRunning[$i] . " ";
	}
	print STDERR "\n";
	# Remind the user that the executable remains; we leave it around
	# to allow the programmer to debug the running program, for which
	# the executable is needed.
	print STDERR "The executable ($programname) will not be removed.\n";
    }
    else {
	if ($remove_this_pgm && $clean_pgms) {
	    unlink $programname, "$programname.o";
	}
	$remove_this_pgm = 0;
    }
}

# ----------------------------------------------------------------------------
sub FindRunning { 
    my $programname = $_[0];
    my @pids = ();

    my $logname = $ENV{'USER'};
    my $pidloc = 1;
    my $rc = open PSFD, "ps auxw -U $logname 2>&1 |";

    if ($rc == 0) { 
	$rc = open PSFD, "ps -fu $logname 2>&1 |";
    }
    if ($rc == 0) {
	print STDERR "Could not execute ps command\n";
	return @pids;
    }

    while (<PSFD>) {
	if (/$programname/) {
	    my @fields = split(/\s+/);
	    my $pid = $fields[$pidloc];
	    # Check that we've found a numeric pid
	    if ($pid =~ /^\d+$/) {
		$pids[$#pids + 1] = $pid;
	    }
	}
    }
    close PSFD;

    return @pids;
}
# ----------------------------------------------------------------------------
#
# TestStatus is a special test that reports success *only* when the 
# status return is NONZERO
sub TestStatus {
    my $MPIOUT = $_[0];
    my $programname = $_[1];
    my $found_error = 0;

    my $inline = "";
    while (<$MPIOUT>) {
	#print STDOUT $_ if $verbose;
	# Skip FORTRAN STOP
	if (/FORTRAN STOP/) { next; }
	$inline .= $_;
	# ANY output is an error. We have the following output
	# exception for the Hydra process manager.
	if (/=*/) { last; }
	if (! /^\s*$/) {
	    print STDERR "Unexpected output in $programname: $_";
	    if (!$found_error) {
		$found_error = 1;
		$err_count ++;
	    }
	}
    }
    my $rc = close ( MPIOUT );
    if ($rc == 0) {
	my $run_status = $?;
	my $signal_num = $run_status & 127;
	if ($run_status > 255) { $run_status >>= 8; }
    }
    else {
	# This test *requires* non-zero return codes
        if (!$found_error) {
	    $found_error = 1;
	    $err_count ++;
        }
	$inline .= "$config{mpiexec} returned a zero status but the program returned a nonzero status\n";
    }
    return ($found_error,$inline);
}
# ----------------------------------------------------------------------------
#
# TestStatusNoErrors is like TestStatus except that it also checks for " No Errors"
# This is useful for fault tolerance tests where mpiexec returns a non-zero status
# because of a failed process, but still outputs " No Errors" when the correct
# behavior is detected.
sub TestStatusNoErrors {
    my $MPIOUT = $_[0];
    my $programname = $_[1];
    my $found_error = 0;
    my $found_noerror = 0;

    my $inline = "";
    while (<MPIOUT>) {
	print STDOUT $_ if $verbose;
	# Skip FORTRAN STOP
	if (/FORTRAN STOP/) { next; }
	$inline .= $_;
	if (/^\s*No [Ee]rrors\s*$/ && $found_noerror == 0) {
	    $found_noerror = 1;
	}
	if (! /^\s*No [Ee]rrors\s*$/ && !/^\s*Test Passed\s*$/) {
	    print STDERR "Unexpected output in $programname: $_";
	    if (!$found_error) {
		$found_error = 1;
		$err_count ++;
	    }
	}
    }
    if ($found_noerror == 0) {
	print STDERR "Program $programname exited without No Errors\n";
	if (!$found_error) {
	    $found_error = 1;
	    $err_count ++;
	}
    }
    my $rc = close ( MPIOUT );
    if ($rc == 0) {
	my $run_status = $?;
	my $signal_num = $run_status & 127;
	if ($run_status > 255) { $run_status >>= 8; }
    }
    else {
	# This test *requires* non-zero return codes
        if (!$found_error) {
	    $found_error = 1;
	    $err_count ++;
        }
	$inline .= "$config{mpiexec} returned a zero status but the program required a non-zero status\n";
    }
    return ($found_error,$inline);
}
#
# TestErrFatal is a special test that reports success *only* when the 
# status return is NONZERO; it ignores error messages
sub TestErrFatal {
    my $MPIOUT = $_[0];
    my $programname = $_[1];
    my $found_error = 0;

    my $inline = "";
    while (<$MPIOUT>) {
	#print STDOUT $_ if $verbose;
	# Skip FORTRAN STOP
	if (/FORTRAN STOP/) { next; }
	$inline .= $_;
	# ALL output is allowed.
    }
    my $rc = close ( MPIOUT );
    if ($rc == 0) {
	my $run_status = $?;
	my $signal_num = $run_status & 127;
	if ($run_status > 255) { $run_status >>= 8; }
    }
    else {
	# This test *requires* non-zero return codes
	if (!$found_error) {
	    $found_error = 1;
	    $err_count ++;
	}
	$inline .= "$config{mpiexec} returned a zero status but the program returned a nonzero status\n";
    }
    return ($found_error,$inline);
}

# ----------------------------------------------------------------------------
# Output routines:
#  RunPreMsg( programname, np, workdir ) - Call before running a program
#  RunTestFailed, RunTestPassed - Call after test
#  RunPostMsg               - Call at end of each test
#
my ($xmloutput, $xmlfullfile);
sub open_XMLOUT {
    my $xmlfile   = shift;
    if (! ($xmlfile =~ /^\//)) {
        my $thisdir = `pwd`;
        chop $thisdir;
        $xmlfullfile = $thisdir . "/" . $xmlfile ;
    }
    else {
        $xmlfullfile = $xmlfile;
    }
    $xmloutput = 1;
    open( XMLOUT, ">$xmlfile" ) || die "Cannot open $xmlfile\n";
    my $date = `date "+%Y-%m-%d-%H-%M"`;
    $date =~ s/\r?\n//;
    # MPISOURCE can be used to describe the source of MPI for this
    # test.
    print XMLOUT "<?xml version='1.0' ?>$newline";
    print XMLOUT "<?xml-stylesheet href=\"TestResults.xsl\" type=\"text/xsl\" ?>$newline";
    print XMLOUT "<MPITESTRESULTS>$newline";
    print XMLOUT "<DATE>$date</DATE>$newline";
    print XMLOUT "<MPISOURCE>$config{MPI_SOURCE}</MPISOURCE>$newline";
}

my ($tapoutput, $tapfullfile);
sub open_TAPOUT {
    my $tapfile = shift;
    if ($tapfile !~ m|^/|) {
        my $thisdir = `pwd`;
        chomp $thisdir;
        $tapfullfile = $thisdir . "/" . $tapfile ;
    }
    else {
        $tapfullfile = $tapfile;
    }
    $tapoutput = 1;
    open( TAPOUT, ">$tapfile" ) || die "Cannot open $tapfile\n";
    my $date = `date "+%Y-%m-%d-%H-%M"`;
    $date =~ s/\r?\n//;
    print TAPOUT "TAP version 13\n";
    print TAPOUT "# MPICH test suite results (TAP format)\n";
    print TAPOUT "# date ${date}\n";
    # we do not know at this point how many tests will be run, so do
    # not print a test plan line like "1..450" until the very end
}

my ($junitoutput, $junitfullfile);
sub open_JUNITOUT {
    $junitfile = shift;
    if ($junitfile !~ m|^/|) {
        my $thisdir = `pwd`;
        chomp $thisdir;
        $junitfullfile = $thisdir . "/" . $junitfile ;
    }
    else {
        $junitfullfile = $junitfile;
    }
    $junitoutput = 1;
    open( JUNITOUT, ">$junitfile" ) || die "Cannot open $junitfile\n";
}

sub close_OUT {
    if ($xmloutput && !$config{noxmlclose}) { 
        print XMLOUT "</MPITESTRESULTS>$newline";
        close XMLOUT; 
    }

    if ($tapoutput) {
        print TAPOUT "1..$total_seen\n";
        close TAPOUT;
    }

    if ($junitoutput) {
        print JUNITOUT "    <system-out></system-out>\n";
        print JUNITOUT "    <system-err></system-err>\n";
        print JUNITOUT "  </testsuite>\n";
        print JUNITOUT "</testsuites>\n";
        close JUNITOUT;

        # the second pass: insert the header
        # Note: the field "errors" is not used now, but reserved for future uses.
        open my $JUNITIN,  '<',  $junitfile      or die "Can't read old file: $!";
        open my $JUNITOUTNEW, '>', "$junitfile.new" or die "Can't write new file: $!";
        my $date = `date "+%Y-%m-%d-%H-%M"`;
        $date =~ s/\r?\n//;
        print $JUNITOUTNEW "<testsuites>\n";
        print $JUNITOUTNEW "  <testsuite failures=\"$err_count\"\n";
        print $JUNITOUTNEW "             errors=\"0\"\n";
        print $JUNITOUTNEW "             skipped=\"$skip_count\"\n";
        print $JUNITOUTNEW "             tests=\"$total_run\"\n";
        print $JUNITOUTNEW "             date=\"${date}\"\n";
        print $JUNITOUTNEW "             name=\"summary_junit_xml\">\n";
        while( <$JUNITIN> ) {
            print $JUNITOUTNEW $_;
        }
        close $JUNITIN;
        close $JUNITOUTNEW;
        move("$junitfile.new","$junitfile");
    }
}

sub print_output_results {
    if ($xmloutput) {
        print "XML formatted results in $xmlfullfile\n";
    }
    if ($tapoutput) {
        print "TAP formatted results in $tapfullfile\n";
    }
    if ($junitoutput) {
        print "JUNIT formatted results in $junitfullfile\n";
    }
}
# ------------
sub RunPreMsg {
    my ($programname,$np,$workdir) = @_;
    if ($xmloutput) {
	print XMLOUT "<MPITEST>$newline<NAME>$programname</NAME>$newline";
	print XMLOUT "<NP>$np</NP>$newline";
	print XMLOUT "<WORKDIR>$workdir</WORKDIR>$newline";
    }
}
sub RunPostMsg {
    my ($programname, $np, $workdir) = @_;
    if ($xmloutput) {
	print XMLOUT "</MPITEST>$newline";
    }
}
sub RunTestPassed {
    my ($programname, $np, $progArgs, $progEnv, $workdir, $xfail, $runtime) = @_;
    if ($xmloutput) {
	print XMLOUT "<STATUS>pass</STATUS>$newline";
    print XMLOUT "<TIME>$runtime</TIME>$newline";
    }
    if ($tapoutput) {
        print TAPOUT "ok ${total_run} - $workdir/$programname ${np} # time=$runtime\n";
    }
    if ($junitoutput) {
        print JUNITOUT "    <testcase name=\"${total_run} - $workdir/$programname ${np} ${progArgs} ${progEnv}\" time=\"$runtime\"></testcase>\n";
    }
}
sub RunTestFailed {
    my $programname = shift;
    my $np = shift;
    my $progArgs = shift;
    my $progEnv = shift;
    my $timeout = shift;
    my $workdir = shift;
    my $output = shift;
    my $xfail = shift;
    my $runtime = shift;

    if ($xmloutput) {
        my $xout = $output;
        # basic escapes that wreck the XML output
        $xout =~ s/</\*AMP\*lt;/g;
        $xout =~ s/>/\*AMP\*gt;/g;
        $xout =~ s/&/\*AMP\*amp;/g;
        $xout =~ s/\*AMP\*/&/g;
        # TODO: Also capture any non-printing characters (XML doesn't like them
        # either).
        print XMLOUT "<TIME>$runtime</TIME>$newline";
	print XMLOUT "<STATUS>fail</STATUS>$newline";
	print XMLOUT "<TESTDIFF>$newline$xout</TESTDIFF>$newline";
    }

    if ($tapoutput) {
        my $xfailstr = '';
        if ($xfail ne '') {
            $xfailstr = " # TODO $xfail";
        }
        print TAPOUT "not ok ${total_run} - $workdir/$programname ${np}${xfailstr} # time=$runtime\n";
        print TAPOUT "  ---\n";
        print TAPOUT "  Directory: $workdir\n";
        print TAPOUT "  File: $programname\n";
        print TAPOUT "  Num-procs: $np\n";
        print TAPOUT "  Timeout: $timeout\n";
        print TAPOUT "  Date: \"" . localtime() . "\"\n";

        # The following would be nice, but it leads to unfortunate formatting in
        # the Jenkins web output for now.  Using comment lines instead, since
        # they are easier to read/find in a browser.
##        print TAPOUT "  Output: |\n";
##        # using block literal format, requires that all chars are printable
##        # UTF-8 (or UTF-16, but we won't encounter that)
##        foreach my $line (split m/\r?\n/, $output) {
##            chomp $line;
##            # 4 spaces, 2 for TAP indent, 2 more for YAML block indent
##            print TAPOUT "    $line\n";
##        }

        print TAPOUT "  ...\n";

        # Alternative to the "Output:" YAML block literal above.  Do not put any
        # spaces before the '#', this causes some TAP parsers (including Perl's
        # TAP::Parser) to treat the line as "unknown" instead of a proper
        # comment.
        print TAPOUT "## Test output (expected 'No Errors'):\n";
        foreach my $line (split m/\r?\n/, $output) {
            chomp $line;
            print TAPOUT "## $line\n";
        }
    }

    if ($junitoutput) {
        my $xfailstr = '';
	my $testtag = "failure";
        if ($xfail ne '') {
            $xfailstr = " # TODO $xfail";
	    $testtag  = "skipped";
        }
        print JUNITOUT "    <testcase name=\"${total_run} - $workdir/$programname ${np} ${progArgs} ${progEnv}\" time=\"$runtime\">\n";
        print JUNITOUT "      <${testtag} type=\"TestFailed\"\n";
        print JUNITOUT "               message=\"not ok ${total_run} - $workdir/$programname ${np}${xfailstr}\"><![CDATA[";
        print JUNITOUT "not ok ${total_run} - $workdir/$programname ${np}${xfailstr}\n";
        print JUNITOUT "  ---\n";
        print JUNITOUT "  Directory: $workdir\n";
        print JUNITOUT "  File: $programname\n";
        print JUNITOUT "  Num-procs: $np\n";
        print JUNITOUT "  Timeout: $timeout\n";
        print JUNITOUT "  Date: \"" . localtime() . "\"\n";

        print JUNITOUT "  ...\n";

        # Alternative to the "Output:" YAML block literal above.  Do not put any
        # spaces before the '#', this causes some JUNIT parsers (including Perl's
        # JUNIT::Parser) to treat the line as "unknown" instead of a proper
        # comment.
        print JUNITOUT "## Test output (expected 'No Errors'):\n";
        foreach my $line (split m/\r?\n/, $output) {
            chomp $line;
            print JUNITOUT "## $line\n";
        }
        print JUNITOUT "    ]]></${testtag}>\n";
        print JUNITOUT "    </testcase>\n";
    }
}

sub SkippedTest {
    my ($programname, $np, $progArgs, $progEnv, $workdir, $reason) = @_;
    if (-d $programname) {
        return;
    }

    # simply omit from the XML output

    if ($tapoutput) {
        print TAPOUT "ok ${total_seen} - $workdir/$programname $np  # SKIP $reason\n";
    }
    if ($junitoutput) {
        print JUNITOUT "    <testcase name=\"${total_seen} - $workdir/$programname ${np} ${progArgs} ${progEnv}\">\n";
        print JUNITOUT "      <skipped type=\"TodoTestSkipped\">\n";
        print JUNITOUT "             message=\"$reason\"><![CDATA[ok ${total_seen} - $workdir/$programname $np  # SKIP $reason]]></skipped>\n";
        print JUNITOUT "    </testcase>\n";
    }

    $skip_count++;
}

# ----------------------------------------------------------------------------
# Alternate init routines
sub InitQuickTimeout {
    $ENV{"MPIEXEC_TIMEOUT"} = 10;
}

# ---- config ------------------------------------------------------
# loads runtests.config into %config
sub load_config {
    my $config_dir = ".";
    if ($0=~/(.*)\//){
        $config_dir = $1;
    }
    if (-f "$config_dir/runtests.config"){
        if (open In, "$config_dir/runtests.config") {
            load_config_In();
            close In;
        }
    }
}

sub load_config_In {
    while (<In>) {
        if (/^\s*(\w+)\s*=\s*(.+)/) {
            $config{$1} = $2;
        }
    }
}

# ---- default ----
sub set_config_default {
    $config{tests} = "testlist";
    $config{srcdir} = ".";

    $config{np_arg} = "-n";     # Name of argument to specify the number of processes
    $config{np_default} = 2;    # Default number of processes to use
    $config{np_max}     = -1;   # Maximum number of processes to use (overrides any

    # PPN support
    # ppn_max is the maximum number of processes per node.  -1 means ignore.
    # ppn_arg is the argument to use to mpiexec - format is "string%d"; e.g.,
    # "-ppn %d"
    $config{ppn_arg}  = '';
    $config{ppn_max}  = -1;

    $config{timeout_default} = 180;
    $config{timeout_multiplier} = 1.0;

    # (batch run: i.e., run them together, then test output, 
    # rather than build/run/check for each test)
    $config{run_batch} = 0;     # Set to true to batch the execution of the tests
    $config{batch_dir} = ".";   # Set to the directory into which to run the examples

    $config{verbose} = 0;
    $config{show_progress} = 0;

    my $pwd = `pwd`; chomp $pwd;
    $config{"stopfile"} = "$pwd/.stoptest";
}

sub post_config {
    if ($config{mpiversion}=~/(\d+)\.(\d+)/) {
        $config{MPIMajorVersion} = $1;
        $config{MPIMinorVersion} = $2;
    }
    if ($config{xmlfile}){
        open_XMLOUT($config{xmlfile});
    }
    if ($config{tapfile}){
        open_TAPOUT($config{tapfile});
    }
    if ($config{junitfile}){
        open_JUNITOUT($config{junitfile});
    }
    foreach my $k ("run_strict", "run_mpix", "run_xfail", "run_batch") {
        if ($config{$k} && $config{$k} =~/^(no|false)$/i) {
            $config{$k} = undef;
        }
    }
}

# ---- environment ----
our %env_vars = (
    MPI_SOURCE => "MPI_SOURCE",
    MPITEST_MPIVERSION => "mpiversion",
    MPITEST_PPNARG => "ppn_arg",
    MPITEST_PPNMAX => "ppn_max",
    MPITEST_TIMEOUT => "timeout_default",
    MPITEST_TIMEOUT_MULTIPLIER => "timeout_multiplier",
    MPITEST_TIMELIMITARG => "timeout_arg", # e.g. "-t %d" for Cray aprun
    MPITEST_BATCH => "run_batch",
    MPITEST_BATCHDIR => "batchdir",
    MPITEST_STOPTEST => "stopfile",
    #   MPITEST_PROGRAM_WRAPPER (Value is added after -np but before test
    #                            executable.  Tools like valgrind may be inserted
    #                            this way.)
    MPITEST_PROGRAM_WRAPPER => "program_wrapper",
    VERBOSE => "verbose",
    V => "verbose",
    RUNTESTS_VERBOSE => "verbose",
    RUNTESTS_SHOWPROGRESS => "show_progress",
    # Define this to leave the XML output file open to receive additional data
    NOXMLCLOSE => "noxmlclose",
);

sub load_environment {
    while (my ($k,$v) = each %env_vars) {
        if (defined $ENV{$k} ){
            $config{$v} = $ENV{$k};
        }
    }
}

# ---- command line ----
our %cmdline_vars = (
    nparg => "np_arg",
    np => "np_default",
    maxnp => "np_max",
    ppnarg => "ppn_arg",
    ppn => "ppn_max",
    batch => "run_batch",
    batchdir => "batch_dir",
    timelimitarg => "timeout_arg",
    showprogress => "show_progress",
    noxmlclose => "noxmlclose",
);

sub load_commandline {
    foreach my $a (@ARGV) {
        if ($a=~/--?help/) {
            print STDERR "runtests [-tests=testfile] [-np=nprocesses] \
            [-maxnp=max-nprocesses] [-srcdir=location-of-tests] \
            [-ppn=max-proc-per-node] [-ppnarg=string] \
            [-timelimitarg=string] [-mpiversion=major.minor] \
            [-xmlfile=filename ] [-tapfile=filename ] \
            [-junitfile=filename ] [-noxmlclose] \
            [-verbose] [-showprogress] [-debug] [-batch] 
            [-dir=execute_in_dir] [-run=\"individual test\"]\n";
            exit(1);
        }
        elsif ($a=~/--?dir=(.*)/) {
            print "---- [$1] ----\n";
            chdir $1 or die "Can't chdir $1\n";
        }
        elsif ($a=~/--?run=(.*)/) {
            # Eg: ./runtests --dir=coll --run="allred 4"
            push @individual_tests, $1;
        }
        elsif ($a =~/--?(\w+)=(.*)/){
            my ($k, $v) = ($1, $2);
            if ($cmdline_vars{$k}) {
                $k = $cmdline_vars{$k};
            }
            $config{$k} = $v;
        }
        elsif ($a =~/--?([\w\-]+)$/) {
            my $k = $1;
            $k=~s/-/_/g;
            $config{$k} = 1;
        }
        else {
        }
    }
}

# ---- arg routines: add options to @$arglist ----
# Handle the ppn (processes per node) option.
sub arg_ppn {
    my ($arglist, $np) = @_;
    if ($config{ppn_arg} && $config{ppn_max} > 0) {
	my ($ppnargs, $nn) = ($config{ppn_arg}, $config{ppn_max});
	# Some systems require setting the number of processes per node
	# no greater than the total number of processes (e.g., aprun on Cray)
	if ($nn > $np) { $nn = $np; }

	$ppnargs =~ s/\%d/$nn/;
	push @$arglist, $ppnargs;
    }
}

# Handle the timelimit option.
sub arg_timelimit {
    my ($arglist, $timeout) = @_;
    if ($config{timeout_arg} ne "" && $timeout> 0) {
	my $t= $config{timeout_arg};
	$t=~ s/\%d/$timeout/;
	push @$arglist, $t;
    }
}

# -- filters: skip tests if return 1 ------------------
sub filter_mpiversion {
    my ($version_required) = @_;
    if (!$version_required) {
        return 0;
    }
    if ($config{MPIMajorVersion} eq "unknown" or $config{MPIMinorVersion} eq "unknown"){
        return 0;
    }
    my ($major, $minor) = split /\./, $version_required;
    if ($major > $config{MPIMajorVersion}) {
        return 1;
    }
    if ($major == $config{MPIMajorVersion} && $minor > $config{MPIMinorVersion} ){
        return 1;
    }
    return 0;
}

sub filter_strict {
    my ($strict_ok) = @_;
    # skip `strict=false` in strict mode
    if (lc($strict_ok) eq "false" && $config{run_strict}){
        return 1;
    }
    return 0;
}

sub filter_xfail {
    my ($xfail) = @_;
    if ($config{run_strict}) {
        return 0;
    }
    if ($xfail && !$config{run_xfail}) {
        return 1;
    }
    return 0;
}

sub filter_mpix {
    my ($mpix_required) = @_;
    if (lc($mpix_required) eq "true" && !$config{run_mpix}) {
        return 1;
    }
    return 0;
}
