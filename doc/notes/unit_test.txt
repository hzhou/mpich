## Rationale

While our integral testsuite works well, some parts of our code is more suited for unit-testing. In particular, most of MPL functionality are unit-separated and does not have dependency; therefore they can be tested without installing or even compiling the entire library. In some other parts of the code we sometime implement utility functions, e.g. in hydra we have some parsing routines for slurm node list options. These utilities are difficult to test in integral tests, which may require a wide variety of run time environment; but they can be easily tested with unit tests for better coverage.

## Usage

The main script is a perl script, unit_test.pl, currently located in src/mpl/. It is invoked in the root of the sub-source tree, i.e. src/mpl/:

    $ perl unit_test.pl

The script looks for `test` folder and collects all `.c` files inside it. For example, it sees `test/strsep.c` -- referred to as test source file. 

For each test source file, the script will read the code and checks for certain options. Options are in the format of `/* \w+: .* */`. Recognized options include:

    /* TEST: title for the test */
    /* CC: gcc */
    /* CFLAGS: -I include -std=c99 */
    /* LDFLAGS: libmpl.la */
    /* SOURCE: src/str/mpl_str.c */

All the options are optional. 

The options `CFLAGS`, `LDFLAGS`, `SOURCE` are used to construct the test command line. For example in test/strsep.c, we have: 

    /* TEST: MPL_strsep.h */
    /* CFLAGS: -I include */
    /* SOURCE: src/str/mpl_str.c */

The test command line would be:

    $ cc -I include -o .test/test-1 .test/test-1.c  ./src/str/mpl_str.c && .test/test-1

The .test is a temporary folder created by the script. Each test is sequenced, therefore, `test-1`.

If a libtool convenience library is included in the `LDFLAGS`, libtool will be used to compile the code. Make sure libtool script is available at where the script is run (usually it is generated by configure).

## Multiple tests per test source file

It is desirable to run multiple small unit tests for a single related feature. It is possible to put multiple such tests inside a single test source file. The script will split a single test source file into multiple unit tests by dividing the source file at the comment line: 

    /* TEST: title for the sub test */

Each `/* TEST: ... */` marks a new unit tests. The source lines before the first `/* TEST: ... */` are duplicated for each unit tests.

## Run individual test source

By default, unit_test.pl looks for `test` folder and runs all c files it finds there. It is also possible to run individual test file. To do that, simply put the c filename in the command line. For example

    $ perl /path/to/unit_test.pl test/strsep.c

, or

    $ perl /path/to/unit_test.pl test/*.c

## Command line options

All options can also be supplied on the command line, for example:

    $ perl unit_test.pl CC='icc -O2' LDFLAGS='-L lib' test/test.c
